import re

DETAILS_URL = 'http://opml.radiotime.com/Describe.ashx?id=%s'
STATION_DETAILS_URL = 'http://opml.radiotime.com/Describe.ashx?c=nowplaying&id=%s'


####################################################################################################

def MetadataObjectForURL(url):
    try:

        station_id = re.match(".*id=(?P<id>(s|p)[0-9]+).*", url).groupdict()['id']
        station_details_page = XML.ElementFromURL(STATION_DETAILS_URL % station_id)

        station = station_details_page.xpath("//outline[@key = 'station']")[0].get('text')

        show_id = station_details_page.xpath("//outline[@key = 'show']")[0].get('guide_id')
        show_detail_page = XML.ElementFromURL(DETAILS_URL % show_id)
        
        title = None
        try: title = show_detail_page.xpath("//show/title/text()")[0]
        except: pass

        hosts = None
        try: hosts = show_detail_page.xpath("//show/hosts/text()")[0]
        except: pass

        thumb = None
        try: thumb = show_detail_page.xpath("//show/logo/text()")[0]
        except: pass

        genre = None
        try: genre = show_detail_page.xpath("//show/genre_id/text()")[0]
        except: pass
        
        return TrackObject(
            artist = station,
            album = title,
            title = hosts,
            thumb = thumb)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################

def MediaObjectsForURL(url):
    return [
      MediaObject(
        parts = [PartObject(key = Callback(PlayTrack, url = url))]
      )
    ]

####################################################################################################

def PlayTrack(url):

    details = XML.ElementFromURL(url + '&c=ebrowse')
    Log(XML.StringFromElement(details))

    stream_url = details.xpath("//outline[@type = 'audio']")[0].get('URL')
    Log(stream_url)

    Log(HTTP.Request(stream_url).content.strip())
    return Redirect(HTTP.Request(stream_url).content.strip())

def parse_m3u(content):
    streams = []
    for item in content.split('\n'):

        if item.startswith('#') == False:
            streams.append(item.strip())

    return streams

def parse_pls(content):
    streams = []
    entries = re.match(".*NumberOfEntries=(?P<entries>[0-9]+).*", content, re.DOTALL).groupdict()['entries']
    for i in range(1, entries + 1):
        streams.append(re.match(".*File%s=(?P<stream>.*)$", content, re.DOTALL).groupdict()['stream'])

    return streams